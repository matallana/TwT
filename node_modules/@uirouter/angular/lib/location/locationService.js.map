{
  "version": 3,
  "file": "locationService.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/angular/location/locationService.ts"
  ],
  "names": [],
  "mappings": ";;;AAEA,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAY,MAAM,gBAAgB,CAAC;;AAI1E;AAAA;IAAyC,+CAAoB;IAC3D,6BAAY,MAAgB,EAAU,iBAAmC,EAAE,SAAkB;QAA7F,YACE,kBAAM,MAAM,EAAE,SAAS,CAAC,SAOzB;QARqC,uBAAiB,GAAjB,iBAAiB,CAAkB;QAGvE,KAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,UAAC,GAAG;YACpC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,YAAY,CAAC,CAAC,CAAC;gBAC9B,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACrB;SACF,CAAC,CAAC;;KACJ;IAED,kCAAI,GAAJ;QACE,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;aACrC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;KACzE;IAED,kCAAI,GAAJ,UAAK,KAAU,EAAE,KAAa,EAAE,GAAW,EAAE,OAAgB;QAC3D,wBAAM,cAAI,EAAE,kBAAM,EAAE,cAAI,CAAmB;QAC3C,IAAI,WAAW,GAAG,IAAI,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;QAElD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;SACxE;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;SACrE;KACF;IAED,qCAAO,GAAP,UAAQ,MAAgB;QACtB,iBAAM,OAAO,YAAC,MAAM,CAAC,CAAC;KACvB;8BAnCH;EAMyC,oBAAoB,EA8B5D,CAAA;;AA9BD,+BA8BC",
  "sourcesContent": [
    "/** @module ng2 */\n/** */\nimport { BaseLocationServices, parseUrl, UIRouter } from '@uirouter/core';\nimport { LocationStrategy } from '@angular/common';\n\n/** A `LocationServices` that delegates to the Angular LocationStrategy */\nexport class Ng2LocationServices extends BaseLocationServices {\n  constructor(router: UIRouter, private _locationStrategy: LocationStrategy, isBrowser: boolean) {\n    super(router, isBrowser);\n\n    this._locationStrategy.onPopState((evt) => {\n      if (evt.type !== 'hashchange') {\n        this._listener(evt);\n      }\n    });\n  }\n\n  _get() {\n    return this._locationStrategy.path(true)\n      .replace(this._locationStrategy.getBaseHref().replace(/\\/$/, ''), '');\n  }\n\n  _set(state: any, title: string, url: string, replace: boolean): any {\n    let { path, search, hash } = parseUrl(url);\n    let urlWithHash = path + (hash ? \"#\" + hash : \"\");\n\n    if (replace) {\n      this._locationStrategy.replaceState(state, title, urlWithHash, search);\n    } else {\n      this._locationStrategy.pushState(state, title, urlWithHash, search);\n    }\n  }\n\n  dispose(router: UIRouter) {\n    super.dispose(router);\n  }\n}\n"
  ]
}