{
  "version": 3,
  "file": "uiSref.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/angular/directives/uiSref.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "/** @ng2api @module directives */\n/** */\nimport { UIRouter, extend, Obj, TransitionOptions, TargetState } from \"@uirouter/core\";\nimport { Directive, Inject, Input, Optional, ElementRef, Renderer2, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { UIView, ParentUIViewInject } from \"./uiView\";\nimport { ReplaySubject } from \"rxjs/ReplaySubject\";\nimport { Subscription } from \"rxjs/Subscription\";\n\n/**\n * @internalapi\n * # blah blah blah\n */\n@Directive({ selector: 'a[uiSref]' })\nexport class AnchorUISref {\n  constructor(public _el: ElementRef, public _renderer: Renderer2) { }\n  openInNewTab() {\n    return this._el.nativeElement.target === '_blank';\n  }\n  update(href: string) {\n    if (href && href !== '') {\n      this._renderer.setProperty(this._el.nativeElement, 'href', href);\n    } else {\n      this._renderer.removeAttribute(this._el.nativeElement, 'href');\n    }\n  }\n}\n\n/**\n * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\n *\n * ### Purpose\n *\n * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\n * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]],\n * and optionally supply state parameter values and transition options.\n *\n * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\n *\n * ### Selector\n *\n * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\n *\n * ### Inputs\n *\n * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\n * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\n *\n * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\n *\n * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\n *\n * @example\n * ```html\n *\n * <!-- Targets bar state' -->\n * <a uiSref=\"bar\">Bar</a>\n *\n * <!-- Assume this component's state is \"foo\".\n *      Relatively targets \"foo.child\" -->\n * <a uiSref=\".child\">Foo Child</a>\n *\n * <!-- Targets \"bar\" state and supplies parameter value -->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\n *\n * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\n * ```\n */\n@Directive({\n  selector: '[uiSref]',\n  exportAs: 'uiSref',\n  host: { '(click)': 'go()' }\n})\nexport class UISref implements OnChanges {\n\n  /**\n   * `@Input('uiSref')` The name of the state to link to\n   *\n   * ```html\n   * <a uiSref=\"hoome\">Home</a>\n   * ```\n   */\n  @Input('uiSref') state: string;\n\n  /**\n   * `@Input('uiParams')` The parameter values to use (as key/values)\n   *\n   * ```html\n   * <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n   * ```\n   */\n  @Input('uiParams') params: any;\n\n  /**\n   * `@Input('uiOptions')` The transition options\n   *\n   * ```html\n   * <a uiSref=\"books\" [uiOptions]=\"{ reload: true }\">Book {{ book.name }}</a>\n   * ```\n   */\n  @Input('uiOptions') options: TransitionOptions;\n\n  /**\n   * An observable (ReplaySubject) of the state this UISref is targeting.\n   * When the UISref is clicked, it will transition to this [[TargetState]].\n   */\n  public targetState$ = new ReplaySubject<TargetState>(1);\n\n  /** @internalapi */ private _emit: boolean = false;\n  /** @internalapi */ private _statesSub: Subscription;\n  /** @internalapi */ private _router: UIRouter;\n  /** @internalapi */ private _anchorUISref: AnchorUISref;\n  /** @internalapi */ private _parent: ParentUIViewInject;\n\n  constructor(\n      _router: UIRouter,\n      @Optional() _anchorUISref: AnchorUISref,\n      @Inject(UIView.PARENT_INJECT) parent: ParentUIViewInject,\n  ) {\n    this._router = _router;\n    this._anchorUISref = _anchorUISref;\n    this._parent = parent;\n\n    this._statesSub = _router.globals.states$.subscribe(() => this.update());\n  }\n\n  /** @internalapi */\n  set \"uiSref\"(val: string) { this.state = val; this.update(); }\n  /** @internalapi */\n  set \"uiParams\"(val: Obj) { this.params = val; this.update(); }\n  /** @internalapi */\n  set \"uiOptions\"(val: TransitionOptions) { this.options = val; this.update(); }\n\n  ngOnInit() {\n    this._emit = true;\n    this.update();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnDestroy() {\n    this._emit = false;\n    this._statesSub.unsubscribe();\n    this.targetState$.unsubscribe();\n  }\n\n  private update() {\n    let $state = this._router.stateService;\n    if (this._emit) {\n      let newTarget = $state.target(this.state, this.params, this.getOptions());\n      this.targetState$.next(newTarget);\n    }\n\n    if (this._anchorUISref) {\n      let href = $state.href(this.state, this.params, this.getOptions());\n      this._anchorUISref.update(href);\n    }\n  }\n\n  getOptions() {\n    let defaultOpts: TransitionOptions = {\n      relative: this._parent && this._parent.context && this._parent.context.name,\n      inherit: true ,\n      source: \"sref\"\n    };\n    return extend(defaultOpts, this.options || {});\n  }\n\n  /** When triggered by a (click) event, this function transitions to the UISref's target state */\n  go() {\n    if (this._anchorUISref && this._anchorUISref.openInNewTab()) {\n      return ;\n    }\n\n    this._router.stateService.go(this.state, this.params, this.getOptions());\n    return false;\n  }\n}\n"
  ]
}