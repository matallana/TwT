{
  "version": 3,
  "file": "uiSrefStatus.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/angular/directives/uiSrefStatus.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "/** @ng2api @module directives */\n/** */\nimport { Directive, Output, EventEmitter, ContentChildren, QueryList } from '@angular/core';\nimport { UISref } from './uiSref';\nimport {\n  PathNode, Transition, TargetState, StateObject, anyTrueR, tail, unnestR, Predicate, UIRouterGlobals, Param, PathUtils, StateOrName\n} from '@uirouter/core';\n\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport {of} from 'rxjs/observable/of';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {combineLatest} from 'rxjs/observable/combineLatest';\nimport {switchMap} from 'rxjs/operator/switchMap';\nimport {map} from 'rxjs/operator/map';\nimport {concat} from 'rxjs/operator/concat';\n\n/** @internalapi */\ninterface TransEvt { evt: string; trans: Transition; }\n\n/**\n * UISref status emitted from [[UISrefStatus]]\n */\nexport interface SrefStatus {\n  /** The sref's target state (or one of its children) is currently active */\n  active: boolean;\n  /** The sref's target state is currently active */\n  exact: boolean;\n  /** A transition is entering the sref's target state */\n  entering: boolean;\n  /** A transition is exiting the sref's target state */\n  exiting: boolean;\n  /** The enclosed sref(s) target state(s) */\n  targetStates: TargetState[];\n}\n\n/** @internalapi */\nconst inactiveStatus: SrefStatus = {\n  active: false,\n  exact: false,\n  entering: false,\n  exiting: false,\n  targetStates: [],\n};\n\n/**\n * Returns a Predicate<PathNode[]>\n *\n * The predicate returns true when the target state (and param values)\n * match the (tail of) the path, and the path's param values\n *\n * @internalapi\n */\nconst pathMatches = (target: TargetState): Predicate<PathNode[]> => {\n  if (!target.exists()) return () => false;\n  let state: StateObject = target.$state();\n  let targetParamVals = target.params();\n  let targetPath: PathNode[] = PathUtils.buildPath(target);\n  let paramSchema: Param[] = targetPath.map(node => node.paramSchema)\n      .reduce(unnestR, [])\n      .filter((param: Param) => targetParamVals.hasOwnProperty(param.id));\n\n  return (path: PathNode[]) => {\n    let tailNode = tail(path);\n    if (!tailNode || tailNode.state !== state) return false;\n    let paramValues = PathUtils.paramValues(path);\n    return Param.equals(paramSchema, paramValues, targetParamVals);\n  };\n};\n\n/**\n * Given basePath: [a, b], appendPath: [c, d]),\n * Expands the path to [c], [c, d]\n * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\n *\n * @internalapi\n */\nfunction spreadToSubPaths(basePath: PathNode[], appendPath: PathNode[]): PathNode[][] {\n  return appendPath.map(node => basePath.concat(PathUtils.subPath(appendPath, n => n.state === node.state)));\n}\n\n/**\n * Given a TransEvt (Transition event: started, success, error)\n * and a UISref Target State, return a SrefStatus object\n * which represents the current status of that Sref:\n * active, activeEq (exact match), entering, exiting\n *\n * @internalapi\n */\nfunction getSrefStatus(event: TransEvt, srefTarget: TargetState): SrefStatus {\n  const pathMatchesTarget = pathMatches(srefTarget);\n  const tc = event.trans.treeChanges();\n\n  let isStartEvent = event.evt === 'start';\n  let isSuccessEvent = event.evt === 'success';\n  let activePath: PathNode[] = isSuccessEvent ? tc.to : tc.from;\n\n  const isActive = () =>\n      spreadToSubPaths([], activePath)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const isExact = () =>\n      pathMatchesTarget(activePath);\n\n  const isEntering = () =>\n      spreadToSubPaths(tc.retained, tc.entering)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const isExiting = () =>\n      spreadToSubPaths(tc.retained, tc.exiting)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  return {\n    active: isActive(),\n    exact: isExact(),\n    entering: isStartEvent ? isEntering() : false,\n    exiting: isStartEvent ? isExiting() : false,\n    targetStates: [srefTarget],\n  } as SrefStatus;\n}\n\n/** @internalapi */\nfunction mergeSrefStatus(left: SrefStatus, right: SrefStatus): SrefStatus {\n  return {\n    active: left.active || right.active,\n    exact: left.exact || right.exact,\n    entering: left.entering || right.entering,\n    exiting: left.exiting || right.exiting,\n    targetStates: left.targetStates.concat(right.targetStates),\n  };\n}\n\n/**\n * A directive which emits events when a paired [[UISref]] status changes.\n *\n * This directive is primarily used by the [[UISrefActive]] directives to monitor `UISref`(s).\n *\n * This directive shares two attribute selectors with `UISrefActive`:\n *\n * - `[uiSrefActive]`\n * - `[uiSrefActiveEq]`.\n *\n * Thus, whenever a `UISrefActive` directive is created, a `UISrefStatus` directive is also created.\n *\n * Most apps should simply use `UISrefActive`, but some advanced components may want to process the\n * [[SrefStatus]] events directly.\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatusChanged($event)\">\n *   <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * </li>\n * ```\n *\n * The `uiSrefStatus` event is emitted whenever an enclosed `uiSref`'s status changes.\n * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`; also has a [[StateOrName]] `identifier`value.\n *\n * The values from this event can be captured and stored on a component (then applied, e.g., using ngClass).\n *\n * ---\n *\n * A single `uiSrefStatus` can enclose multiple `uiSref`.\n * Each status boolean (`active`, `exact`, `entering`, `exiting`) will be true if *any of the enclosed `uiSref` status is true*.\n * In other words, all enclosed `uiSref` statuses  are merged to a single status using `||` (logical or).\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatus($event)\" uiSref=\"admin\">\n *   Home\n *   <ul>\n *     <li> <a uiSref=\"admin.users\">Users</a> </li>\n *     <li> <a uiSref=\"admin.groups\">Groups</a> </li>\n *   </ul>\n * </li>\n * ```\n *\n * In the above example, `$event.active === true` when either `admin.users` or `admin.groups` is active.\n *\n * ---\n *\n * This API is subject to change.\n */\n@Directive({\n  selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]',\n  exportAs: 'uiSrefStatus'\n})\nexport class UISrefStatus {\n  /** current statuses of the state/params the uiSref directive is linking to */\n  @Output(\"uiSrefStatus\") uiSrefStatus = new EventEmitter<SrefStatus>(false);\n  /** Monitor all child components for UISref(s) */\n  @ContentChildren(UISref, {descendants: true}) private _srefs: QueryList<UISref>;\n\n  /** The current status */\n  status: SrefStatus;\n\n  /** @internalapi */ private _subscription: Subscription;\n  /** @internalapi */ private _srefChangesSub: Subscription;\n  /** @internalapi */ private _srefs$: BehaviorSubject<UISref[]>;\n  /** @internalapi */ private _globals: UIRouterGlobals;\n  constructor(_globals: UIRouterGlobals) {\n    this._globals = _globals;\n    this.status = Object.assign({}, inactiveStatus);\n  }\n\n  ngAfterContentInit() {\n    // Map each transition start event to a stream of:\n    // start -> (success|error)\n    let transEvents$: Observable<TransEvt> = switchMap.call(this._globals.start$, (trans: Transition) => {\n      const event = (evt: string) => ({evt, trans} as TransEvt);\n\n      let transStart$ = of(event(\"start\"));\n      let transResult = trans.promise.then(() => event(\"success\"), () => event(\"error\"));\n      let transFinish$ = fromPromise(transResult);\n\n      return concat.call(transStart$, transFinish$);\n    });\n\n    // Watch the @ContentChildren UISref[] components and get their target states\n\n    // let srefs$: Observable<UISref[]> = of(this.srefs.toArray()).concat(this.srefs.changes);\n    this._srefs$ = new BehaviorSubject(this._srefs.toArray());\n    this._srefChangesSub = this._srefs.changes.subscribe(srefs => this._srefs$.next(srefs));\n\n    let targetStates$: Observable<TargetState[]> =\n        switchMap.call(this._srefs$, (srefs: UISref[]) =>\n            combineLatest<TargetState[]>(srefs.map(sref => sref.targetState$)));\n\n    // Calculate the status of each UISref based on the transition event.\n    // Reduce the statuses (if multiple) by or-ing each flag.\n    this._subscription = switchMap.call(transEvents$, (evt: TransEvt) => {\n      return map.call(targetStates$, (targets: TargetState[]) => {\n        let statuses: SrefStatus[] = targets.map(target => getSrefStatus(evt, target));\n        return statuses.reduce(mergeSrefStatus);\n      });\n    }).subscribe(this._setStatus.bind(this));\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) this._subscription.unsubscribe();\n    if (this._srefChangesSub) this._srefChangesSub.unsubscribe();\n    if (this._srefs$) this._srefs$.unsubscribe();\n    this._subscription = this._srefChangesSub = this._srefs$ = undefined;\n  }\n\n  private _setStatus(status: SrefStatus) {\n    this.status = status;\n    this.uiSrefStatus.emit(status);\n  }\n}\n"
  ]
}